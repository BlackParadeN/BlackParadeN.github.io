<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javaFx快速入门</title>
    <url>/2020/11/05/javaFx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="什么是javaFx"><a href="#什么是javaFx" class="headerlink" title="什么是javaFx"></a>什么是javaFx</h2><p>我粗略的认知就是：用来写桌面应用程序的，跟swing的定位差不多。</p>
<a id="more"></a>

<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p>视频：<a href="https://www.bilibili.com/video/BV1fW41167RP">https://www.bilibili.com/video/BV1fW41167RP</a></p>
<h2 id="一个最简单的javaFx程序"><a href="#一个最简单的javaFx程序" class="headerlink" title="一个最简单的javaFx程序"></a>一个最简单的javaFx程序</h2><ul>
<li>继承Application</li>
<li>实现Application中的start方法</li>
<li>在main方法中调用launch()方法来启动start()方法</li>
<li>start()方法中传入参数Stage</li>
<li>Stage即为应用窗口，调用show()方法显示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		launch(args);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage stage)</span> </span>&#123;</span><br><span class="line">		stage.show();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><ul>
<li>先运行init方法初始化，在运行start方法 -&gt; 窗口显示</li>
<li>窗口关闭 -&gt; 调用stop方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Stage窗口"><a href="#Stage窗口" class="headerlink" title="Stage窗口"></a>Stage窗口</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li><p>设置标题：<code>setTitle()</code></p>
</li>
<li><p>设置左上角图标：<code>getIcons().add(new Image(&quot;url&quot;))</code></p>
</li>
<li><p>设置窗口最大化：<code>setMaximized(true)</code></p>
</li>
<li><p>设置窗口最小化：<code>setIconified(true)</code></p>
</li>
<li><p>关闭窗口：<code>close()</code></p>
</li>
<li><p>设置不可拉伸：<code>setResizable(false)</code></p>
</li>
<li><p>设置宽高：<code>setWidth(500)</code>、<code>setHeight(500)</code></p>
</li>
<li><p>设置最大最小宽高：<code>setMaxHeight()</code>、<code>setMinHeight()</code></p>
</li>
<li><p>获取宽高：<code>getWidth</code>、<code>getHeight</code></p>
<ul>
<li><p>如果之前没有设置宽高，还想要获取。需要在show()后获取</p>
</li>
<li><p>动态获取宽高（使用监听器）</p>
<p>使用这个方法，可以在拉伸的时候获取当前窗口的宽高，能作为自适应布局的一种方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">primaryStage.heightProperty().addListener(<span class="keyword">new</span> ChangeListener&lt;Number&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前高度 = &quot;</span> + newValue.doubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">primaryStage.widthProperty().addListener(<span class="keyword">new</span> ChangeListener&lt;Number&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前宽度 = &quot;</span> + newValue.doubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置全屏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">primaryStage.setFullScreen(<span class="keyword">true</span>);</span><br><span class="line">primaryStage.setScene(<span class="keyword">new</span> Scene(<span class="keyword">new</span> Group())); <span class="comment">// 此行代码后续展开讲</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置透明度：<code>setOpacity(0.5)</code> （0：完全透明）</p>
</li>
<li><p>设置窗口置顶：<code>setAlwaysOnTop(true)</code></p>
</li>
<li><p>设置窗口在屏幕位置：<code>setX(500)</code>、<code>setY(500)</code></p>
</li>
</ul>
<h2 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h2><p>5种窗口类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认</span></span><br><span class="line">stage.initStyle(StageStyle.DECORATED);</span><br><span class="line"><span class="comment">// 设置stage无任何装饰</span></span><br><span class="line">stage.initStyle(StageStyle.UNDECORATED);</span><br><span class="line"><span class="comment">// 设置stage背景透明</span></span><br><span class="line">stage.initStyle(StageStyle.TRANSPARENT);</span><br><span class="line"><span class="comment">// 设置stage白色背景</span></span><br><span class="line">stage.initStyle(StageStyle.UNIFIED);</span><br><span class="line"><span class="comment">// 设置stage只有一个关闭按钮</span></span><br><span class="line">stage.initStyle(StageStyle.UTILITY);</span><br></pre></td></tr></table></figure>



<p>模态窗口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stage.initModality(Modality.APPLICATION_MODAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WINDOW_MODAL模式</span></span><br><span class="line"><span class="comment">// 是两个窗口之间，有一个拥有关系，才会生效</span></span><br><span class="line">Stage s1 = <span class="keyword">new</span> Stage();</span><br><span class="line">Stage s2 = <span class="keyword">new</span> Stage();</span><br><span class="line">s2.initOwner(s1);</span><br><span class="line">s2.initModality(Modality.WINDOW_MODAL);</span><br></pre></td></tr></table></figure>



<h1 id="工具类Platform"><a href="#工具类Platform" class="headerlink" title="工具类Platform"></a>工具类Platform</h1><p><strong>Platform.exit()</strong></p>
<p>退出。关闭所有窗口</p>
<p><strong>Platform.runLater()</strong></p>
<p>如果您需要从非GUI线程更新GUI组件，您可以使用它将您的更新放在队列中，并且它将由GUI线程（并未重新开一个线程，还是start的javaFx Application Thread线程）尽快处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Platform.runLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行操作，一般用来更新UI界面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>Platform.setImplicitExit()</strong></p>
<p>设置<code>Platform.setImplicitExit(false)</code>后，所有窗口都关闭了，程序也不会关闭。调用<code>Platform.exit()</code>之后，程序才会关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Platform.setImplicitExit(<span class="keyword">false</span>);</span><br><span class="line">primaryStage.show();</span><br><span class="line">Platform.exit();</span><br></pre></td></tr></table></figure>



<p><strong>Platform.isSupported()</strong></p>
<p>判断电脑是否支持某种特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 电脑是否支持3d</span></span><br><span class="line">Platform.isSupported(ConditionalFeature.SCENE3D);</span><br></pre></td></tr></table></figure>



<h1 id="Screen类"><a href="#Screen类" class="headerlink" title="Screen类"></a>Screen类</h1><p>获取当前屏幕信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Screen screen = Screen.getPrimary();</span><br><span class="line">Rectangle2D rt = screen.getBounds(); <span class="comment">// 屏幕大小</span></span><br><span class="line">Rectangle2D rt2 = screen.getVisualBounds(); <span class="comment">// 用户可以看到的屏幕</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;左上x：&quot;</span>+ rt.getMinX() +<span class="string">&quot;左上y：&quot;</span> + rt.getMinY());</span><br><span class="line">System.out.println(<span class="string">&quot;右下x：&quot;</span>+rt.getMaxX()+<span class="string">&quot;右下y：&quot;</span> + rt.getMaxY());</span><br><span class="line">System.out.println(<span class="string">&quot;宽：&quot;</span>+rt.getWidth()+<span class="string">&quot;高：&quot;</span> + rt.getHeight());</span><br><span class="line">System.out.println(screen.getDpi()); <span class="comment">// 获取DPI</span></span><br></pre></td></tr></table></figure>



<h1 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h1><p>Scene放在Stage上面，Node放在Scene上面。</p>
<p>Scene在初始化时，需要给构造参数传一个根节点。</p>
<p>一般根节点是一个布局类。这里可以使用Group类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Group group = <span class="keyword">new</span> Group();</span><br><span class="line">Button button = <span class="keyword">new</span> Button(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">group.getChildren().add(button);</span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(group);</span><br><span class="line">primaryStage.setScene(scene);</span><br></pre></td></tr></table></figure>



<h2 id="改变在scene上的鼠标样式"><a href="#改变在scene上的鼠标样式" class="headerlink" title="改变在scene上的鼠标样式"></a>改变在scene上的鼠标样式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手</span></span><br><span class="line">scene.setCursor(Cursor.HAND);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义样式</span></span><br><span class="line">URL url = getClass().getClassLoader().getResource(<span class="string">&quot;logo.png&quot;</span>);</span><br><span class="line">String path = url.toExternalForm();</span><br><span class="line"></span><br><span class="line">scene.setCursor(Cursor.cursor(path));</span><br></pre></td></tr></table></figure>



<h2 id="打开一个网页"><a href="#打开一个网页" class="headerlink" title="打开一个网页"></a>打开一个网页</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HostServices host = getHostServices();</span><br><span class="line">host.showDocument(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure>



<h1 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h1><p>我们先初始化三个Button：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button b1 = <span class="keyword">new</span> Button(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">Button b2 = <span class="keyword">new</span> Button(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">Button b3 = <span class="keyword">new</span> Button(<span class="string">&quot;按钮3&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>然后将他们添加到group中，这里有两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">group.getChildren().add(b1);</span><br><span class="line">group.getChildren().add(b2);</span><br><span class="line">group.getChildren().add(b3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">group.getChildren().addAll(b1,b2,b3);</span><br></pre></td></tr></table></figure>

<p>如果这是你运行，会发现只显示按钮3，按钮1和按钮2被覆盖了，那么如何显示呢？</p>
<p>可分别设置每个按钮的位置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1.setLayoutX(<span class="number">100</span>);</span><br><span class="line">b1.setLayoutY(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<p>因为<code>group.getChildren()</code>获取的是一个List，所以也可以对这个List进行操作。</p>
<p>比如删除按钮1：<code>group.getChildren().remove(0)</code>，全部删除：<code>group.getChildren().clear()</code></p>
<h1 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h1><p>这里写了一个点击按钮1，触发事件，增加子组件。</p>
<p>group设置监听器，每次子组件增加触发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">        Button button = (Button) event.getSource(); <span class="comment">// event.getSource()获取的是Object对象</span></span><br><span class="line">        Button b4 = <span class="keyword">new</span> Button(<span class="string">&quot;b4&quot;</span>);</span><br><span class="line">        group.getChildren().add(b4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">group.getChildren().addListener(<span class="keyword">new</span> ListChangeListener&lt;Node&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(Change&lt;? extends Node&gt; c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前子组件数量：&quot;</span> + c.getList().size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="鼠标点击事件"><a href="#鼠标点击事件" class="headerlink" title="鼠标点击事件"></a>鼠标点击事件</h1><h2 id="单击"><a href="#单击" class="headerlink" title="单击"></a>单击</h2><p>注意这里的<code>MouseEvent</code>别导错包了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.scene.input.MouseEvent;</span><br><span class="line"></span><br><span class="line">b1.addEventHandler(MouseEvent.MOUSE_CLICKED, <span class="keyword">new</span> EventHandler&lt;MouseEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MouseEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鼠标单击事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="双击"><a href="#双击" class="headerlink" title="双击"></a>双击</h2><p>很简单，判断点击次数为2就行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.scene.input.MouseEvent;</span><br><span class="line"></span><br><span class="line">b1.addEventHandler(MouseEvent.MOUSE_CLICKED, <span class="keyword">new</span> EventHandler&lt;MouseEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(MouseEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getClickCount() == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;双击事件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不过这里的点击判定很宽松，点击左键右键和中键都行。</p>
<p>那么怎样只判断左键双击呢？只需要修改if条件就行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (event.getClickCount() == <span class="number">2</span> &amp;&amp; event.getButton().name().equals(MouseButton.PRIMARY.name()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>鼠标左键：<code>MouseButton.PRIMARY</code><br>鼠标右键：<code>MouseButton.SECONDARY</code><br>鼠标中键：<code>MouseButton.MIDDLE</code></p>
<h1 id="键盘按键"><a href="#键盘按键" class="headerlink" title="键盘按键"></a>键盘按键</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按下</span></span><br><span class="line">b1.setOnKeyPressed(<span class="keyword">new</span> EventHandler&lt;KeyEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断按键是否为A</span></span><br><span class="line">        <span class="keyword">if</span> (event.getCode().getName().equals(KeyCode.A.getName())) &#123;</span><br><span class="line">            System.out.println(event.getCode().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line">b1.setOnKeyReleased(<span class="keyword">new</span> EventHandler&lt;KeyEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(KeyEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(event.getCode().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="组合键"><a href="#组合键" class="headerlink" title="组合键"></a>组合键</h2><p>监听Ctrl + C</p>
<p>这里的<code>KeyCombination.SHORTCUT_DOWN</code>在win中指Ctrl，在Mac中指Meta</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyCombination kccb = <span class="keyword">new</span> KeyCodeCombination(KeyCode.C, KeyCombination.SHORTCUT_DOWN);</span><br><span class="line">scene.getAccelerators().put(kccb, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javaFX</tag>
      </tags>
  </entry>
</search>
